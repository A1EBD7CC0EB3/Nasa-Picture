#
# This is an example of a GitHub Actions workflow that performs CI (Continuous Integration) and CD (Continuous Deployment) Functions
#

name: Java CI/CD Pipeline Example

#
# The workflow is launched when any file in any branch is changed
#
on: [push]
jobs:
  build:
#
# This workflow uses an Ubuntu Linux Virtual Machine (the "runner") to perform the workflow steps
#
    runs-on: ubuntu-latest

    steps:
#
# The checkout action replicates the repository files into the virtual machine instance
#
    - uses: actions/checkout@v1

#
# The setup-java actions installs the 1.8 version of the Java JDK
#
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
#     
# An encrypted pem file has been placed in the repository in the secrets folder. The gpg utility uses a secret that is stored in the repo secrets vault
# to decrypt the pem file so it may be used to authenticate to the Amazon AWS servers
#
    - name: Prepare pem file
      run: gpg --quiet --batch --yes --decrypt --passphrase="$GPGPW" --output marx4universe.pem secrets/marx4universe.pem.gpg
      env:
        GPGPW: ${{secrets.awspassword}}        
    - name: Change pem File Permissions
      run: chmod 0400 marx4universe.pem
#
# The gradlew wrapper has been installed in the repo and is used to run the gradle build. The first run is to run the unit tests defined in the application
#      
    - name: Run Unit Tests
      run: ./gradlew test
#
# Once the test reports have been produced they are copied to the test-reports folder on the runner instance
#      
    - name: Stage Test Reults
      run: cp build/test-results/test/*.xml test-reports
#
# This action copies the test report to the artifact staging area where it can be downloaded if desired
#
    - uses: actions/upload-artifact@master
      with:
        name: test-report
        path: test-reports/      
#
# The following commands use an ansible playbook from the repo called ansible/copy-test-reports.yml to copy the reports to an apache web server.
# The reports are in html format and are placed in directories for each GitHub actor, or user. The url name of the server is in the ansible/inventory.yml
# file under webservers.
#    
    - name: Copy Test Reports To AWS Webserver
# testing for alternative students
      run: ansible-playbook -u ubuntu --private-key=marx4universe.pem -i ansible/inventory.yml --extra-vars "ghactor=${{github.actor}}" ansible/copy-test-reports.yml
      env:
        ANSIBLE_HOST_KEY_CHECKING: False
#
# This command builds the actual java byte code binary for deployment if all unit tests have passed.
#
    - name: Build with Gradle
      run: ./gradlew build
#
# The following statements use the Dockerfile in the repo to build a container image with the war file produced. This builds the container, logs into dockerhub.com, tags the image,
# and finally pushes it to dockerhub.com
#     
    - name: Docker Build
      run: docker build -t nasa-picture .
    - name: Login To Docker Hub
      run: docker login -u ${{secrets.dhuser}} -p ${{secrets.dhpassword}}
    - name: Tag Docker Image
      run: docker tag nasa-picture:latest githubtraining/universe:np-${{github.actor}}
    - name: Push Image To DockerHub
      run: docker push githubtraining/universe:np-${{github.actor}}
#
# When a Kubernetes Cluster is initialized a file called /etc/kubernetes/config is created. The contents of that file is a certificate that is used to authenticate 
# to the Kubernetes API. The contents of the Kubernetes Config file to enable kubectl to function has been encrypted and placed in the repo. The following stated
# uses a secret from the GitHub vault to decrypt the Kubernetes config file and place it in a location where it may be used for the subsequent kubectl commands.
#
    - name: Decrypt k8s config credentials
      run: gpg --quiet --batch --yes --decrypt --passphrase="$GPGPW" --output k8s_config secrets/k8s_config.gpg
      env:
        GPGPW: ${{secrets.awspassword}}
#
# This command uses a Kubernetes YAML file named kubernetes/nasa-picture.yml from the repo to create or update the pod deployment and the service used to expose the pod's
# listening port to the Internet.
#       
    - name: Kubernetes kubectl create/update service and application deployment
      run: kubectl apply -f kubernetes/nasa-picture.yml
      env: 
        KUBECONFIG: k8s_config
#
# This command simply interrogates the cluster to display the service that is running.
#
    - name: Kubernetes kubectl get service
      run: kubectl get service
      env: 
        KUBECONFIG: k8s_config
#
# This command simply interrogates the cluster to display the deployments and the number of container pods running in the pod replica set.
#        
    - name: Kubernetes kubectl get deployments
      run: kubectl get deployments
      env: 
        KUBECONFIG: k8s_config
#
# This command interrogates the cluster to display the pods and their status.
#
    - name: Kubernetes kubectl get pods
      run: kubectl get pods
      env: 
        KUBECONFIG: k8s_config
